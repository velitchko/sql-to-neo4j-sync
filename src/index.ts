import { MySQLConnector } from './connectors/mysql';\nimport { Neo4jConnector } from './connectors/neo4j';\nimport { SqlConfig, Neo4jConfig } from './types';\n\nexport async function syncMySQLToNeo4j(mysqlConfig: SqlConfig, neo4jConfig: Neo4jConfig) {\n  const mysql = new MySQLConnector(mysqlConfig);\n  const neo4j = new Neo4jConnector(neo4jConfig);\n\n  const tables = await mysql.getTables();\n\n  // First pass: create nodes for every row\n  const tableRows: Record<string, any[]> = {};\n  for (const table of tables) {\n    const schema = await mysql.getTableSchema(table);\n    const rows = await mysql.getTableRows(table);\n    tableRows[table] = rows;\n\n    for (const row of rows) {\n      const properties = Object.entries(row)\n        .map(([key, value]) => `${key}: ${JSON.stringify(value)}`)\n        .join(', ');\n\n      const cypher = `MERGE (n:${table} {${properties}})`;\n      await neo4j.runCypher(cypher);\n    }\n  }\n\n  // Second pass: create relationships with properties from foreign keys\n  for (const table of tables) {\n    const schema = await mysql.getTableSchema(table);\n    const fkList = schema.foreignKeys || [];\n    const rows = tableRows[table];\n\n    for (const fk of fkList) {\n      for (const row of rows) {\n        // Relationship properties: include the FK value and all row props if desired\n        const relProps = Object.entries(row)\n          .map(([key, value]) => `${key}: ${JSON.stringify(value)}`)\n          .join(', ');\n\n        const fromId = row[fk.column];\n        // Find the matching target row(s) by referenced column value\n        const targetTableRows = tableRows[fk.references.table] || [];\n        const targets = targetTableRows.filter(targetRow => targetRow[fk.references.column] === fromId);\n\n        for (const targetRow of targets) {\n          // Node match by PKs\n          const fromMatch = Object.entries(row)\n            .map(([key, value]) => `${key}: ${JSON.stringify(value)}`)\n            .join(', ');\n\n          const toMatch = `${fk.references.column}: ${JSON.stringify(targetRow[fk.references.column])}`;\n\n          const cypher = `\n            MATCH (a:${table} {${fromMatch}})\n            MATCH (b:${fk.references.table} {${toMatch}})\n            MERGE (a)-[r:${fk.column}_TO_${fk.references.table} {${relProps}}]->(b)\n          `;\n          await neo4j.runCypher(cypher);\n        }\n      }\n    }\n  }\n\n  await neo4j.close();\n}