import mysql from 'mysql2/promise';\nimport { SqlConfig, TableSchema, RowData } from '../types';\n\nexport class MySQLConnector {\n  private config: SqlConfig;\n\n  constructor(config: SqlConfig) {\n    this.config = config;\n  }\n\n  async getConnection() {\n    return mysql.createConnection(this.config);\n  }\n\n  async getTables(): Promise<string[]> {\n    const conn = await this.getConnection();\n    const [rows] = await conn.execute("SHOW TABLES");\n    await conn.end();\n    return rows.map((row: any) => Object.values(row)[0]);\n  }\n\n  async getTableSchema(table: string): Promise<TableSchema> {\n    const conn = await this.getConnection();\n    const [columnsRows] = await conn.execute(`SHOW COLUMNS FROM \\`${table}\``);\n    const [fkRows] = await conn.execute(`\n      SELECT COLUMN_NAME, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME\n      FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n      WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? AND REFERENCED_TABLE_NAME IS NOT NULL\n    `, [this.config.database, table]);\n\n    await conn.end();\n\n    const columns = columnsRows.map((col: any) => ({\n      name: col.Field,\n      type: col.Type\n    }));\n\n    const primaryKey = columnsRows.find((col: any) => col.Key === 'PRI')?.Field;\n\n    const foreignKeys = fkRows.map((fk: any) => ({\n      column: fk.COLUMN_NAME,\n      references: {\n        table: fk.REFERENCED_TABLE_NAME,\n        column: fk.REFERENCED_COLUMN_NAME\n      }\n    }));\n\n    return { name: table, columns, primaryKey, foreignKeys };\n  }\n\n  async getTableRows(table: string): Promise<RowData[]> {\n    const conn = await this.getConnection();\n    const [rows] = await conn.execute(`SELECT * FROM \\`${table}\``);\n    await conn.end();\n    return rows as RowData[];\n  }\n}\n